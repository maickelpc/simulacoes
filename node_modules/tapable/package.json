{
  "_args": [
    [
      {
        "raw": "tapable@^0.2.7",
        "scope": null,
        "escapedName": "tapable",
        "name": "tapable",
        "rawSpec": "^0.2.7",
        "spec": ">=0.2.7 <0.3.0",
        "type": "range"
      },
      "/var/www/html/angular/simulacoes2/node_modules/enhanced-resolve"
    ]
  ],
  "_from": "tapable@^0.2.7",
  "_hasShrinkwrap": false,
  "_id": "tapable@0.2.9",
  "_location": "/tapable",
  "_nodeVersion": "8.11.4",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/tapable_0.2.9_1543309817875_0.8941063194920646"
  },
  "_npmUser": {
    "name": "sokra",
    "email": "tobias.koppers@googlemail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "tapable@^0.2.7",
    "scope": null,
    "escapedName": "tapable",
    "name": "tapable",
    "rawSpec": "^0.2.7",
    "spec": ">=0.2.7 <0.3.0",
    "type": "range"
  },
  "_requiredBy": [
    "/enhanced-resolve",
    "/webpack"
  ],
  "_resolved": "https://registry.npmjs.org/tapable/-/tapable-0.2.9.tgz",
  "_shasum": "af2d8bbc9b04f74ee17af2b4d9048f807acd18a8",
  "_shrinkwrap": null,
  "_spec": "tapable@^0.2.7",
  "_where": "/var/www/html/angular/simulacoes2/node_modules/enhanced-resolve",
  "author": {
    "name": "Tobias Koppers @sokra"
  },
  "bugs": {
    "url": "https://github.com/webpack/tapable/issues"
  },
  "dependencies": {},
  "description": "Just a little module for plugins.",
  "devDependencies": {
    "mocha": "^2.2.4",
    "should": "^5.2.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-2wsvQ+4GwBvLPLWsNfLCDYGsW6xb7aeC6utq2Qh0PFwgEy7K7dsma9Jsmb2zSQj7GvYAyUGSntLtsv++GmgL1A==",
    "shasum": "af2d8bbc9b04f74ee17af2b4d9048f807acd18a8",
    "tarball": "https://registry.npmjs.org/tapable/-/tapable-0.2.9.tgz",
    "fileCount": 4,
    "unpackedSize": 17628,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJb/Qn6CRA9TVsSAnZWagAAQ4wP/1kWwq6T8vUy390ja3yU\nir/LO36OsgpS0v3+JiswVBgCAYItL94d/7FK3B9AJ8msG9IiRz0JGdo+Gphf\nnoPR0B+w3MfG2Qpd/bg8sGv4ShCFj6DNM0jzNFoSWGpi/Xul8Q1f+PKVuglZ\n/tO4U84Q80VBLHRw8xe2ZlwnSz6+fu+afX8xBp6P6nnQ+pLHoCVBoITt8TuO\nvAAdOcoIIozANb12kCLY/LB4i0DtwbPtsUg0vOAkfcA89Ly0BC8Kdqj7Sl+f\nd9LWRi/F405pMtk8gvRpj8I4Z7EzOJJug7lhyrbtXizcnLK6xIlSNiGPOW7k\nflZdZWt40hwZVzz924CUcE/T9NGP9cWp3Dvn5PDPqKMnrFaqgVZUtGtg3rrC\nqtyABs6rNGGbJEG/r3hbqo8WyeWCjOT35bUfIcNRalJrhRFG4i5VubPQWRin\nxojQsPrdCnX7eACqz/MewfgTbe5pgT8dk0nXWoMzvdBtGOIKQFtQhoKolgKN\nAUuU9JODQR+FhBW/gxeBaiIAiBgm4VVM1iB+IKg+xu/67cSUkxpihoa6Z3kR\neXMgAW6K5JHQEuZrJif9sndxe20SyEBFRYc5nVQYuWc02CdUgLoiMHdby6gY\nO6kTA/oee3kasen7cSKIxpEPisIvNyX3XEC9/tyeIPoq26AGIE7dIF1FwYpw\nFbBX\r\n=nz4V\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=0.6"
  },
  "files": [
    "lib"
  ],
  "gitHead": "b5eed4c2ce20d9394746cb9a74660e75df490d28",
  "homepage": "https://github.com/webpack/tapable",
  "license": "MIT",
  "main": "lib/Tapable.js",
  "maintainers": [
    {
      "name": "sokra",
      "email": "tobias.koppers@googlemail.com"
    }
  ],
  "name": "tapable",
  "optionalDependencies": {},
  "readme": "# Tapable\n\n``` javascript\nvar Tapable = require(\"tapable\");\n```\n\n`Tapable` is a class for plugin binding and applying.\n\nJust extend it.\n\n``` javascript\nfunction MyClass() {\n\tTapable.call(this);\n}\n\nMyClass.prototype = Object.create(Tapable.prototype);\n\nMyClass.prototype.method = function() {};\n```\n\nOr mix it in.\n\n``` javascript\nfunction MyClass2() {\n\tEventEmitter.call(this);\n\tTapable.call(this);\n}\n\nMyClass2.prototype = Object.create(EventEmitter.prototype);\nTapable.mixin(MyClass2.prototype);\n\nMyClass2.prototype.method = function() {};\n```\n\n## Public functions\n\n### apply\n\n``` javascript\nvoid apply(plugins: Plugin...)\n```\n\nAttaches all plugins passed as arguments to the instance, by calling `apply` on them.\n\n### plugin\n\n``` javascript\nvoid plugin(names: string|string[], handler: Function)\n```\n\n`names` are the names (or a single name) of the plugin interfaces the class provides.\n\n`handler` is a callback function. The signature depends on the class. `this` is the instance of the class.\n\n## Protected functions\n\n### applyPlugins\n\n``` javascript\nvoid applyPlugins(name: string, args: any...)\n```\n\nSynchronously applies all registered handlers for `name`. The handler functions are called with all args.\n\n### applyPluginsWaterfall\n\n``` javascript\nany applyPluginsWaterfall(name: string, init: any, args: any...)\n```\n\nSynchronously applies all registered handlers for `name`. The handler functions are called with the return value of the previous handler and all args. For the first handler `init` is used and the return value of the last handler is return by `applyPluginsWaterfall`\n\n### applyPluginsAsync\n\n``` javascript\nvoid applyPluginsAsync(\n\tname: string,\n\targs: any...,\n\tcallback: (err?: Error) -> void\n)\n```\n\nAsynchronously applies all registered handlers for `name`. The handler functions are called with all args and a callback function with the signature `(err?: Error) -> void`. The handler functions are called in order of registration.\n\n`callback` is called after all handlers are called.\n\n### applyPluginsBailResult\n\n``` javascript\nany applyPluginsBailResult(name: string, args: any...)\n```\n\nSynchronously applies all registered handlers for `name`. The handler function are called with all args. If a handler function returns something `!== undefined`, the value is returned and no more handlers are applied.\n\n### applyPluginsAsyncWaterfall\n\n``` javascript\napplyPluginsAsyncWaterfall(\n\tname: string,\n\tinit: any,\n\tcallback: (err: Error, result: any) -> void\n)\n```\n\nAsynchronously applies all registered handlers for `name`. The handler functions are called with the current value and a callback function with the signature `(err: Error, nextValue: any) -> void`. When called, `nextValue` is the current value for the next handler. The current value for the first handler is `init`. After all handlers are applied, `callback` is called with the last value. If any handler passes a value for `err`, the `callback` is called with this error and no more handlers are called.\n\n### applyPluginsAsyncSeries\n\n``` javascript\napplyPluginsAsyncSeries(\n\tname: string,\n\targs: any...,\n\tcallback: (err: Error, result: any) -> void\n)\n```\n\nAsynchronously applies all registered handlers for `name`. The handler functions are called with all `args` and a callback function with the signature `(err: Error) -> void`. The handlers are called in series, one at a time. After all handlers are applied, `callback` is called. If any handler passes a value for `err`, the `callback` is called with this error and no more handlers are called.\n\n### applyPluginsParallel\n\n``` javascript\napplyPluginsParallel(\n\tname: string,\n\targs: any...,\n\tcallback: (err?: Error) -> void\n)\n```\n\nApplies all registered handlers for `name` in parallel. The handler functions are called with all args and a callback function with the signature `(err?: Error) -> void`. The `callback` function is called when all handlers have called the callback without `err`. If any handler calls the callback with `err`, `callback` is invoked with this error and the other handlers are ignored.\n\n### applyPluginsParallelBailResult\n\n``` javascript\napplyPluginsParallelBailResult(\n\tname: string,\n\targs: any...,\n\tcallback: (err: Error, result: any) -> void\n)\n```\n\nApplies all registered handlers for `name` in parallel. The handler functions are called with all args and a callback function with the signature `(err?: Error) -> void`. Handler functions must call the callback. They can either pass an error, pass undefined, or pass a value. The first result (either error or value) which is not undefined is passed to the `callback`. The order is defined by registration, not by the speed of the handler function.\n\n### hasPlugins\n\n``` js\nhasPlugins(\n\tname: string\n)\n```\n\nReturns true, if plugins are registered for this name.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/webpack/tapable.git"
  },
  "scripts": {
    "test": "mocha --reporter spec"
  },
  "version": "0.2.9"
}
