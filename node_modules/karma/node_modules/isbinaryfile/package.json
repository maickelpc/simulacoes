{
  "_args": [
    [
      {
        "raw": "isbinaryfile@^3.0.0",
        "scope": null,
        "escapedName": "isbinaryfile",
        "name": "isbinaryfile",
        "rawSpec": "^3.0.0",
        "spec": ">=3.0.0 <4.0.0",
        "type": "range"
      },
      "/var/www/html/angular/simulacoes2/node_modules/karma"
    ]
  ],
  "_from": "isbinaryfile@^3.0.0",
  "_hasShrinkwrap": false,
  "_id": "isbinaryfile@3.0.3",
  "_location": "/karma/isbinaryfile",
  "_nodeVersion": "10.1.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/isbinaryfile_3.0.3_1533238236961_0.5843964125280325"
  },
  "_npmUser": {
    "name": "gjtorikian",
    "email": "gjtorikian@gmail.com"
  },
  "_npmVersion": "6.1.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "isbinaryfile@^3.0.0",
    "scope": null,
    "escapedName": "isbinaryfile",
    "name": "isbinaryfile",
    "rawSpec": "^3.0.0",
    "spec": ">=3.0.0 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/karma"
  ],
  "_resolved": "https://registry.npmjs.org/isbinaryfile/-/isbinaryfile-3.0.3.tgz",
  "_shasum": "5d6def3edebf6e8ca8cae9c30183a804b5f8be80",
  "_shrinkwrap": null,
  "_spec": "isbinaryfile@^3.0.0",
  "_where": "/var/www/html/angular/simulacoes2/node_modules/karma",
  "bugs": {
    "url": "https://github.com/gjtorikian/isBinaryFile/issues"
  },
  "dependencies": {
    "buffer-alloc": "^1.2.0"
  },
  "description": "Detects if a file is binary in Node.js. Similar to Perl's -B.",
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-cli": "~0.1.13",
    "grunt-exec": "0.4.3",
    "grunt-release": "~0.6.0",
    "mocha": "^2.2.4"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-8cJBL5tTd2OS0dM4jz07wQd5g0dCCqIhUxPIGtZfa5L6hWlvV5MHTITy/DBAsF+Oe2LS1X3krBUhNwaGUWpWxw==",
    "shasum": "5d6def3edebf6e8ca8cae9c30183a804b5f8be80",
    "tarball": "https://registry.npmjs.org/isbinaryfile/-/isbinaryfile-3.0.3.tgz",
    "fileCount": 4,
    "unpackedSize": 7437,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbY1vdCRA9TVsSAnZWagAAxJIP/33dCvBH5oYSe/MM6GVe\neQHaGS3aa5Dvy3rXVd7Q44xfZRswtnsTtd3wELLiv5ehiNFunosYQkn4sMIm\nN764cHeFX9x7fhmRcFNUCJ0/9lVVCy4V3EB4ZgJCV0GRMB8taAx+JeV3ESsR\nmMp4a1pHotu2HD430r/YwdVYZIO0+DSOAdKr+TBK8zRQUFSMV6bICyn4ObBG\nLUoYVKcQPBMjwJMiuoV1pOZd3AI2tUucjHCcPZthFJxVG+cQ4HFuEOXEp+Ry\nrrvkHs0tFKqJwCeYBKcguRskSfhIg2NV02Fm+UWE6MPZ1sAEBum7EikU2ryu\nijtnLOsGQa436rvvWUd8Ob2OKJNL/EoT0SPl1DLV2t48VUwRWU7/L9OE0Q0V\nSI7aIVOEns1TIVYmk40W7qV/5bpB4Mp46H8Tg/px6eqs9gcrpbjDum3wSWL3\njjh32ji3AwSgI98djpcAFyu04tLsVZpcx/1rqwfxo54sTNDC6ijJClRMeys8\niPsekcjUZpxh1CVKAR4Qhr5ShobVPNlkysFGk8sthdrjqV5+3KgpiEwLRal1\nBrVhYTVLts0shl+FBHXIyRa9IeyQMurL5cyQpAVOjXAYfnodTiiXiQiolTer\n1AdetAFws8R6nYNc6/CAaW9L6URjaYJw1AGHPP0hy/+KxOWaiyTp9aPoULa1\nSL6D\r\n=hEoI\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=0.6.0"
  },
  "files": [
    "index.js"
  ],
  "gitHead": "7c07d831c8fbaf9868424509e09ebb90d8509366",
  "homepage": "https://github.com/gjtorikian/isBinaryFile#readme",
  "license": "MIT",
  "main": "./index.js",
  "maintainers": [
    {
      "name": "Garen J. Torikian",
      "email": "gjtorikian@gmail.com"
    }
  ],
  "name": "isbinaryfile",
  "optionalDependencies": {},
  "readme": "# isBinaryFile\n\nDetects if a file is binary in Node.js. Similar to [Perl's `-B` switch](http://stackoverflow.com/questions/899206/how-does-perl-know-a-file-is-binary), in that:\n- it reads the first few thousand bytes of a file\n- checks for a `null` byte; if it's found, it's binary\n- flags non-ASCII characters. After a certain number of \"weird\" characters, the file is flagged as binary\n\nMuch of the logic is pretty much ported from [ag](https://github.com/ggreer/the_silver_searcher).\n\nNote: if the file doesn't exist, is a directory, or is empty, the function returns `false`.\n\n## Installation\n\n```\nnpm install isbinaryfile\n```\n\n## Usage\n\n### isBinaryFile(filepath, callback)\n\n* `filepath`, a `string` indicating the path to the file.\n* `callback`, a `function` for the callback. It has two arguments:\n  - `err`, the typical Node.js error argument\n  - `result`, a `boolean` of `true` or `false`, depending on if the file is binary\n\n\n### isBinaryFile(bytes, size, callback)\n\n* `bytes`, a `Buffer` of the file's contents.\n* `size`, an optional `number` indicating the file size.\n* `callback`, a `function` for the callback. It has two arguments:\n  - `err`, the typical Node.js error argument\n  - `result`, a `boolean` of `true` or `false`, depending on if the file is binary\n\n\n### isBinaryFile.sync(filepath)\n\n* `filepath`, a `string` indicating the path to the file.\n\n\n### isBinaryFile.sync(bytes, size)\n\n* `bytes`, a `Buffer` of the file's contents.\n* `size`, an `number` indicating the file size.\n\n\nReturns a `boolean` of `true` or `false`, depending on if the file is binary.\n\n### Examples\n\n```javascript\nvar isBinaryFile = require(\"isbinaryfile\");\n\nfs.readFile(\"some_file\", function(err, data) {\n  fs.lstat(\"some_file\", function(err, stat) {\n    isBinaryFile(data, stat.size, function (err, result) {\n      if (!err) {\n        if (result) {\n          console.log(\"It is!\")\n        }\n        else {\n          console.log(\"No.\")\n        }\n      }\n    });\n  });\n});\n\nisBinaryFile.sync(\"some_file\"); // true or false\nvar bytes = fs.readFileSync((\"some_file\"));\nvar size = fs.lstatSync((\"some_file\").size;\nisBinaryFile.sync(bytes, size); // true or false\n```\n\n## Testing\n\nRun `npm install` to install `mocha`, then run `npm test`.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/gjtorikian/isBinaryFile.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "version": "3.0.3"
}
