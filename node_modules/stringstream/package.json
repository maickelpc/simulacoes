{
  "_args": [
    [
      {
        "raw": "stringstream@~0.0.4",
        "scope": null,
        "escapedName": "stringstream",
        "name": "stringstream",
        "rawSpec": "~0.0.4",
        "spec": ">=0.0.4 <0.1.0",
        "type": "range"
      },
      "/var/www/html/angular/simulacoes2/node_modules/request"
    ]
  ],
  "_from": "stringstream@>=0.0.4 <0.1.0",
  "_id": "stringstream@0.0.6",
  "_inCache": true,
  "_location": "/stringstream",
  "_nodeVersion": "8.11.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/stringstream_0.0.6_1526552557136_0.20062352033275022"
  },
  "_npmUser": {
    "name": "hichaelmart",
    "email": "michael.hart.au@gmail.com"
  },
  "_npmVersion": "6.0.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "stringstream@~0.0.4",
    "scope": null,
    "escapedName": "stringstream",
    "name": "stringstream",
    "rawSpec": "~0.0.4",
    "spec": ">=0.0.4 <0.1.0",
    "type": "range"
  },
  "_requiredBy": [
    "/request"
  ],
  "_resolved": "https://registry.npmjs.org/stringstream/-/stringstream-0.0.6.tgz",
  "_shasum": "7880225b0d4ad10e30927d167a1d6f2fd3b33a72",
  "_shrinkwrap": null,
  "_spec": "stringstream@~0.0.4",
  "_where": "/var/www/html/angular/simulacoes2/node_modules/request",
  "author": {
    "name": "Michael Hart",
    "email": "michael.hart.au@gmail.com",
    "url": "http://github.com/mhart"
  },
  "bugs": {
    "url": "https://github.com/mhart/StringStream/issues"
  },
  "dependencies": {},
  "description": "Encode and decode streams into string streams",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "integrity": "sha512-87GEBAkegbBcweToUrdzf3eLhWNg06FJTebl4BVJz/JgWy8CvEr9dRtX5qWphiynMSQlxxi+QqN0z5T32SLlhA==",
    "shasum": "7880225b0d4ad10e30927d167a1d6f2fd3b33a72",
    "tarball": "https://registry.npmjs.org/stringstream/-/stringstream-0.0.6.tgz",
    "fileCount": 6,
    "unpackedSize": 6242,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa/VftCRA9TVsSAnZWagAA6KMP/ieCrg0R0w4OF+ptEu5Z\nMatSI7T+xoZAKA+/dHPcLuEBfBT5Dilim5ryW6l7iqnQpBxfLnmSaqLJo5Jg\n9hBb4ojhblFC1FKmL1tSwqCQt9yQN/PHLi5+iWpRSfSubaqSMG5Ryi2HP4Ek\nssanBMdfB++umdRa6KzXHvyxrUnJ2qK1wDV55qnsVR2tBm4H8TO38mRryedE\n4WMd+XQrTICRvGiAsxOBNYylajvZdAKVdP59yNP5C0EzFpXLxd5wtyHYaewL\nVwdUNNYiRkRXSSeV7IWBzaVCf7m/NF7hm9pRXm7k1He3XBeMzlUiLe3h9rw3\nadrGevZdIkuxuddOV57q6bE2ZSWLZjY/7hmuXMPlGxLMxY2sz8UdT5XHS2Ej\nZfmLexQHr+b83I0xkLTDZrV/Ul+xV2gXa+OdFDMakupsB9lOMUlwzt+drE6G\nEKUBnQ8gtXq00z8EWJiPK2s72I4m/3MWztyHKLU7Xh9wOjaZE0YbsUEBZrOD\ndFdkcyU8BwJVpTHR1pnfwMx8xPzeXGsozQkdnCz9MCe8slrI2zGJiaO8WX1h\nLZlUbTGkmQdow1Tr16KMroipZr4Occ9ywvcdRJZ82ZMbK6mZQVPxPOiTM2is\nlHgSChWwuEO/HDwuSJVU02VFEyQAsYdly7EBD2ghYprVFvb9qYJnsINwU2LF\nuIDd\r\n=TTH/\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "fee31c5c4a5efc7c7cc2fde4aee633dedefd6d67",
  "homepage": "https://github.com/mhart/StringStream#readme",
  "keywords": [
    "string",
    "stream",
    "base64",
    "gzip"
  ],
  "license": "MIT",
  "main": "stringstream.js",
  "maintainers": [
    {
      "name": "hichaelmart",
      "email": "michael.hart.au@gmail.com"
    }
  ],
  "name": "stringstream",
  "optionalDependencies": {},
  "readme": "# Decode streams into strings The Right Way(tm)\n\n```javascript\nvar fs   = require('fs')\nvar zlib = require('zlib')\nvar strs = require('stringstream')\n\nvar utf8Stream = fs.createReadStream('massiveLogFile.gz')\n  .pipe(zlib.createGunzip())\n  .pipe(strs('utf8'))\n```\n\nNo need to deal with `setEncoding()` weirdness, just compose streams\nlike they were supposed to be!\n\nHandles input and output encoding:\n\n```javascript\n// Stream from utf8 to hex to base64... Why not, ay.\nvar hex64Stream = fs.createReadStream('myFile')\n  .pipe(strs('utf8', 'hex'))\n  .pipe(strs('hex', 'base64'))\n```\n\nAlso deals with `base64` output correctly by aligning each emitted data\nchunk so that there are no dangling `=` characters:\n\n```javascript\nvar stream = fs.createReadStream('myFile').pipe(strs('base64'))\n\nvar base64Str = ''\n\nstream.on('data', function(data) { base64Str += data })\nstream.on('end', function() {\n  console.log('My base64 encoded file is: ' + base64Str) // Wouldn't work with setEncoding()\n  console.log('Original file is: ' + new Buffer(base64Str, 'base64'))\n})\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mhart/StringStream.git"
  },
  "version": "0.0.6"
}
